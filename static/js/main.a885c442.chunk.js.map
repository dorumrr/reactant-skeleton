{"version":3,"sources":["app/utils/GlobalState.js","app/App.js","serviceWorker.js","index.js"],"names":["_config","siteTitle","_actions","getData","Promise","resolve","a","success","GlobalState","createContainer","useState","error","setError","loading","setLoading","snackMessages","setSnackMessages","globalState","console","log","SubMenu","App","props","useContainer","current","setCurrent","style","background","margin","padding","type","justify","size","icon","onClick","e","key","selectedKeys","mode","Item","title","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAGMA,EAAU,CACfC,UAAW,YAGNC,EAAW,CAChBC,QAAS,kBAAM,IAAIC,QAAJ,uCAAY,WAAMC,GAAN,SAAAC,EAAA,sDAC1BD,EAAQ,CAACE,SAAS,IADQ,2CAAZ,yDAsBDC,EADKC,aAhBG,WAAO,IAAD,EACFC,mBAAS,MADP,mBACrBC,EADqB,KACdC,EADc,OAEEF,oBAAS,GAFX,mBAErBG,EAFqB,KAEZC,EAFY,OAGcJ,mBAAS,IAHvB,mBAGrBK,EAHqB,KAGNC,EAHM,KAKtBC,EAAc,CACnBjB,UACAE,WACAS,QAAOC,WACPC,UAASC,aACTC,gBAAeC,oBAGhB,OADAE,QAAQC,IAAI,oBAAqB,iBAAkBF,GAC5CA,K,6GCrBAG,G,WAAAA,SAiCOC,MA/Bf,SAAaC,GACX,IAAML,EAAcT,EAAYe,eADd,EAEYb,mBAAS,QAFrB,mBAEXc,EAFW,KAEFC,EAFE,KAIlB,OACE,uBAAQC,MAAO,CAACC,WAAY,UAAWC,OAAQ,SAAUC,QAAS,WAChE,uBAAKC,KAAK,OAAOC,QAAQ,iBACvB,uBAAKL,MAAO,CAACG,QAAS,IACpB,uBAAQG,KAAM,GAAIC,KAAK,SADzB,IACoChB,EAAYjB,QAAQC,WAExD,2BACE,uBAAMiC,QARM,SAAAC,GAAC,OAAIV,EAAWU,EAAEC,MAQFC,aAAc,CAACb,GAAUc,KAAK,cACxD,sBAAMC,KAAN,CAAWH,IAAI,QAAO,uBAAMN,KAAK,SAAjC,QACA,sBAAMS,KAAN,CAAWH,IAAI,eAAc,uBAAMN,KAAK,SAAxC,QAEA,kBAACV,EAAD,CACEoB,MAAO,8BAA8C,uBAAMV,KAAK,YAAzD,YAEP,sBAAMS,KAAN,CAAWH,IAAI,eAAf,UAGF,sBAAMG,KAAN,CAAWH,IAAI,WACb,uBAAGK,KAAK,0BAA0BC,OAAO,SAASC,IAAI,uBAAtD,eCjBMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OAAO,kBAAC,EAAYC,SAAb,KAAsB,kBAAC,IAAD,KAAe,kBAAC,EAAD,QAAgDC,SAASC,eAAe,SD0HvH,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a885c442.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { createContainer } from 'unstated-next';\n\nconst _config = {\n\tsiteTitle: 'ReactANT'\n}\n\nconst _actions = {\n\tgetData: () => new Promise(async resolve => {\n\t\tresolve({success: true});\n\t})\n}\n\nconst useGlobalState = () => {\n\tconst [error, setError] = useState(null);\n\tconst [loading, setLoading] = useState(false);\n\tconst [snackMessages, setSnackMessages] = useState([]);\n\n\tconst globalState = {\n\t\t_config,\n\t\t_actions,\n\t\terror, setError,\n\t\tloading, setLoading,\n\t\tsnackMessages, setSnackMessages,\n\t}\n\tconsole.log('%c~> globalState:', 'color: #0000FF', globalState);\n\treturn globalState;\n}\n\nconst GlobalState = createContainer(useGlobalState);\nexport default GlobalState;","import React, { useState } from 'react';\nimport { GlobalState } from './utils'\nimport './App.css';\nimport { Layout, Menu, Icon, Avatar, Row, Col } from 'antd';\n\nconst { SubMenu } = Menu;\n\nfunction App(props) {\n  const globalState = GlobalState.useContainer();\n  const [current, setCurrent] = useState('mail');\n  const handleClick = e => setCurrent(e.key);\n  return (\n    <Layout style={{background: '#ffffff', margin: '0 auto', padding: '0 20px'}}>\n      <Row type=\"flex\" justify=\"space-between\">\n        <Col style={{padding: 8}}>\n          <Avatar size={36} icon=\"user\" /> {globalState._config.siteTitle}\n        </Col>\n        <Col>\n          <Menu onClick={handleClick} selectedKeys={[current]} mode=\"horizontal\">\n            <Menu.Item key=\"home\"><Icon type=\"mail\" />I.am</Menu.Item>\n            <Menu.Item key=\"development\"><Icon type=\"mail\" />I.do</Menu.Item>\n            {/* <Menu.Item key=\"app\" disabled><Icon type=\"appstore\" />Navigation Two</Menu.Item> */}\n            <SubMenu\n              title={<span /* className=\"submenu-title-wrapper\" */><Icon type=\"setting\" />I.enjoy</span>}\n            >\n              <Menu.Item key=\"photography\">Hobby</Menu.Item>\n              {/* <Menu.Item key=\"setting:2\">Videography</Menu.Item> */}\n            </SubMenu>\n            <Menu.Item key=\"doru.uk\">\n              <a href=\"https://doru-moraru.com\" target=\"_blank\" rel=\"noopener noreferrer\">I.web</a>\n            </Menu.Item>\n          </Menu>\n        </Col>\n      </Row>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalState } from './app/utils'\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\nReactDOM.render(<GlobalState.Provider><BrowserRouter><App /></BrowserRouter></GlobalState.Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}